<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
<!--<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/styles/default.min.css">-->
<link rel="stylesheet" href="../../css/cmp.css">
<title>The buffer~ Object</title>
</head>
<body>
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  <ul class="navbar-nav mr-auto">
    <li class="nav-item"> <a class="nav-link" href="https://dobrian.github.io/cmp">Computer Music Programming</a> </li>
    <li class="nav-item"> <a class="nav-link" href="../../topics.html">Topics</a> </li>
    <li class="nav-item"> <a class="nav-link" href="0.RAM-basedSamplePlayback.html">RAM-Based Sample Playback in Max</a> </li>
  </ul>
</nav>
<div class="container">
  <h1>The buffer~ Object</h1>
  <div id="video-script" class="row">
    <div id="video" class="col">
      <video controls
                 src="1.The-buffer-object.mp4"
                 width="100%"
                 height="100%"
			 ></video>
    </div>
    <div id="script" class="col">
      <button id="toggle-script" type="button" class="btn btn-primary">Show/Hide Text</button>
      <div id="script-text" style="display: none; overflow-y: scroll">
        <h3>The Notes on a Keyboard</h3>
        <p>An audio buffer is a portion of your computer’s Random Access Memory that has been designated for holding audio data, or samples. Once established, this portion of memory can be written to and read from. In Max, you can do this using a buffer~ object. The buffer object does not play audio, but it does offer helpful functions that will allow editing or saving the audio. Let’s have a look at some of this functionality.</p>
        <p>The buffer~ object needs a name. Next, you can designate the buffer’s size in samples, as well as how many audio channels it has. Whether or not you define its size and channel count depends on what you hope to do with the buffer. In this case, we will be loading in a file from the disk in a way that will automatically set the size and channel count, so we will just provide a name. We will use the “replace” function to automatically format the buffer for a certain audio file. The selected file is then loaded into the buffer. The ability to visualize the audio is very helpful during the development process. We can do this by double clicking the buffer object while the patch is locked. Another method is to create a waveform~ object and assign it to the buffer. Either set the bufferName attribute while creating the object or send its first inlet the message “set” then your buffer name.</p>
        <p> Now, let’s make a 3-channel audio buffer that is 1 second long, or 44100 samples (assuming our sampling rate is 44100). The buffer~ object can have its own sampling rate, but we will stick to the default patch settings. 
          This buffer needs a different name, then the amount of samples, then the channels. Let's fill the buffer with a 1 hertz sine wave with the “fill” message. Double clicking the object lets us visualize that the buffer does indeed have 3 channels and has been filled with the sine wave. </p>
      </div>
    </div>
  </div>
  <p>Preloading sound into random-access memory (RAM)—–as opposed to reading it off of a hard disk—–allows you more easily to access any point in the sound file instantaneously, read backwards as well as forwards, access different points in the sound simultaneously, etc. When reading from disk, you usually need to give the computer a tiny bit of advance notice to preload some of the sound into memory before you use it; that's why, if you have the RAM available, it often makes most sense just to preload whatever sound you’ll need into memory.</p>
  <p>The <strong>buffer~</strong> object establishes a named location in RAM in which you can store audio data. You can preload a sound file (or a portion of a sound file) into that <strong>buffer~</strong> with the message <em>read</em> or <em>replace</em>. Other MSP objects can then refer to that memory location by name, and can use the data in various ways.</p>
  <p>The patch "objectsthataccessbuffer~" doesn’t really do much of anything, but it gathers together many (not all!) of the objects that can refer to a <strong>buffer~</strong>. You can Option-click (Alt-click on Windows) on each object to learn more about how it works.</p>
  <h2>Downloads</h2>
  <p>Download the files used in the above examples by right-clicking the links, and
    then selecting "Save Link As...".</p>
  <ul>
    <li><a href="objectsthataccessbuffer~.maxpat">objectsthataccessbuffer~.maxpat</a></li>
  </ul>
</div>
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script> 
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script> 
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script> 
<!--<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/highlight.min.js"></script>
    <script>
    //$('pre').addClass("javascript");
    hljs.initHighlightingOnLoad();
    </script>--> 
<script src="../../js/cmp.js"></script>
</body>
</html>
